#version 430

layout (local_size_x = 16, local_size_y = 16) in;

// Define the structure for a 3D point in space
struct Point {
    vec3 position;
    vec3 normal;
    vec3 color;
    float reflectivity;
};

// Define the structure for a sphere
struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
    float reflectivity;
};

// Define the structure for a plane
struct Plane {
    vec3 point;
    float pad1;
    vec3 normal;
    float pad2;
    vec3 color;
    float reflectivity;
};

// Define the structure for a light
struct Light {
    vec3 position;
    float pad1;
    vec3 color;
    float pad2;
};

// Shader Storage Buffer for Scene Data
layout (std430, binding = 0) buffer SceneData {
    Sphere spheres[3];
    Plane planes[6];
    Light lights[1];
};

// Uniforms
uniform int screenWidth;
uniform int screenHeight;
uniform vec3 cameraPos;
uniform vec3 cameraDir;
uniform float focalLength;

// Output image
layout (rgba32f, binding = 0) uniform image2D imgOutput;

const float MAX_FLOAT = 3.402823466e+38;

bool intersectSphere(vec3 rayOrigin, vec3 rayDir, Sphere sphere, out float t) {
    vec3 oc = rayOrigin - sphere.center;
    float a = dot(rayDir, rayDir);
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;
    if (discriminant > 0) {
        t = (-b - sqrt(discriminant)) / (2.0 * a);
        return t > 0;
    }
    return false;
}

bool intersectPlane(vec3 rayOrigin, vec3 rayDir, Plane plane, out float t) {
    float denom = dot(plane.normal, rayDir);
    if (denom > 1e-6) {
        vec3 p0l0 = plane.point - rayOrigin;
        t = dot(p0l0, plane.normal) / denom;
        return t > 0;
    }
    return false;
}

bool intersectLight(vec3 rayOrigin, vec3 rayDir, Light light, out float t) {
    vec3 oc = rayOrigin - light.position;
    float a = dot(rayDir, rayDir);
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - 0.1 * 0.1;
    float discriminant = b * b - 4.0 * a * c;
    if (discriminant > 0) {
        t = (-b - sqrt(discriminant)) / (2.0 * a);
        return t > 0;
    }
    return false;
}

bool shadow(vec3 hitPoint) {
    for(int i = 0; i < lights.length(); i++) {
        vec3 lightPos = lights[i].position;
        vec3 rayDir = normalize(lightPos - hitPoint);

        for(int i = 0; i < spheres.length(); i++) {
            Sphere sphere = spheres[i];
            float t;
            if(intersectSphere(hitPoint, rayDir, sphere, t) && t > 0.001f && t < 1.0f) return true;
        }
        for (int i = 0; i < planes.length(); i++) {
            Plane plane = planes[i];
            float t;
            if(intersectPlane(hitPoint, rayDir, plane, t) && t > 0.001f && t < 1.0f) return true;
        }    
    }
    return false;
}

Point getClosestPoint(vec3 rayOrigin, vec3 rayDir) {
    Point closestPoint;
    float t;
    float smallestT = MAX_FLOAT;

    for(int i = 0; i < spheres.length(); i++) {
        Sphere sphere = spheres[i];
        if(intersectSphere(rayOrigin, rayDir, sphere, t) && t < smallestT) {
            // Hit
            smallestT = t;
            closestPoint.position = rayOrigin + t * rayDir;
            closestPoint.normal = normalize(closestPoint.position - sphere.center);
            closestPoint.color = sphere.color;
            closestPoint.reflectivity = sphere.reflectivity;
        }
    }

    for(int i = 0; i < planes.length(); i++) {
        Plane plane = planes[i];
        float t;
        if(intersectPlane(rayOrigin, rayDir, plane, t) && t < smallestT) {
            // Hit
            smallestT = t;
            closestPoint.position = rayOrigin + t * rayDir;
            closestPoint.normal = plane.normal;
            closestPoint.color = plane.color;
            closestPoint.reflectivity = plane.reflectivity;
        }
    }
    return closestPoint;
}

void main() {
    ivec2 globalID = ivec2(gl_GlobalInvocationID.xy); // Global thread ID in 2D
    if(globalID.x >= screenWidth || globalID.y >= screenHeight) return;

    // Convert globalID to normalized device coordinates (NDC)
    float u = (float(globalID.x) / float(screenWidth)) * 2.0 - 1.0;
    float v = (float(globalID.y) / float(screenHeight)) * 2.0 - 1.0;

    vec3 cameraRight = normalize(cross(cameraDir, vec3(0.0f, 1.0f, 0.0f)));
    vec3 cameraUp = cross(cameraRight, cameraDir);
    float aspectRatio = float(screenWidth) / float(screenHeight);
    
    // Trace the ray corresponding to this pixel
    vec3 rayDir = normalize(cameraDir * focalLength 
                            + cameraRight * u * aspectRatio 
                            + cameraUp * v);
    vec3 rayOrigin = cameraPos;

    // Get the closest point of intersection
    Point closestPoint = getClosestPoint(rayOrigin, rayDir);
    vec3 color = closestPoint.color;

    // Reflection
    if(closestPoint.reflectivity > 0.0f) {
        // Reflective surface
        vec3 reflectDir = reflect(rayDir, closestPoint.normal);
        Point reflectedPoint = getClosestPoint(closestPoint.position, reflectDir);
        color = closestPoint.color * (1.0f - closestPoint.reflectivity) 
                    + reflectedPoint.color * closestPoint.reflectivity;
    }

    // // Light check
    // float t;
    // for(int i = 0; i < lights.length(); i++) {
    //     Light light = lights[i];
    //     if(intersectLight(rayOrigin, rayDir, light, t)) {
    //         // Hit
    //         imageStore(imgOutput, globalID, vec4(vec3(1.0), 1.0));
    //         return;
    //     }
    // }

    // Shadow check
    if(shadow(closestPoint.position)) {
        color *= 0.1;
        imageStore(imgOutput, globalID, vec4(color, 1.0));
        return;
    }

    //Phong shading
    vec3 lightDir = normalize(closestPoint.position - lights[0].position);
    vec3 reflectDir = normalize(reflect(lightDir, closestPoint.normal));
    
    vec3 ambient = vec3(0.25) * color;
    vec3 diffuse = max(0.0f, dot(-lightDir, closestPoint.normal)) * color;
    vec3 specular = pow(max(0.0f, dot(reflectDir, -rayDir)), 32) * vec3(1.0);

    color = ambient + diffuse; //+ specular;
    imageStore(imgOutput, globalID, vec4(color, 1.0));
    return;
}